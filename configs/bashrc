#
# ~/.bashrc
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

alias ls='ls --color=auto'
alias grep='grep --color=auto'

function ignore { $1 $2 &>/dev/null & }

export EDITOR=vim
export LESS=-RFX

export PS1="\[\e[0;36m\]\u\[\e[0m\] on \[\e[0;34m\]\h\[\e[0m\] in \[\e[0;33m\]\w\[\e[0m\] with \[\e[0;35m\]\j\[\e[0m\] job(s)\n\$(if [[ \$? == 0 ]]; then echo \"\[\e[0;32m\]:)\[\e[0m\]\"; else echo \"\[\e[0;31m\]:(\[\e[0m\]\"; fi) "

complete -cf sudo
complete -cf man

alias uprepos='find $REP -mindepth 1 -maxdepth 1 -type d -exec git --git-dir={}/.git --work-tree={} pull origin master \;'

shopt -s cdspell
bind 'set completion-ignore-case on'

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
# fs [FUZZY PATTERN] - Select selected tmux session
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
# switch session
fs() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux switch-client -t "$session"
}
# Tmux
# ftpane - switch pane
ftpane () {
  local panes current_window target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_window=$(tmux display-message  -p '#I')

  target=$(echo "$panes" | fzf) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}


# Bash
# cdf - cd into the directory of the selected file
cdf() {
   local file
   local dir
   file=$(fzf +m -q "$1") && dir=$(dirname "$file") && cd "$dir"
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-*} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - including hidden directories
fda() {
    local dir
    dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# Git
fbr() {
    local branches branch
    branches=$(git branch) &&
      branch=$(echo "$branches" | fzf +s +m) &&
      git checkout $(echo "$branch" | sed "s/.* //")
}

# fco - checkout git commit
fco() {
    local commits commit
    commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
        commit=$(echo "$commits" | fzf +s +m -e) &&
        git checkout $(echo "$commit" | sed "s/ .*//")
}
# fshow - git commit browser
fshow() {
  local out sha q
  while out=$(
      git log --decorate=short --graph --oneline --color=always |
      fzf --ansi --multi --no-sort --reverse --query="$q" --print-query); do
    q=$(head -1 <<< "$out")
    while read sha; do
      [ -n "$sha" ] && git show --color=always $sha | less -R
    done < <(sed '1d;s/^[^a-z0-9]*//;/^$/d' <<< "$out" | awk '{print $1}')
  done
}

# ctags
ftags() {
  local line
  [ -e tags ] &&
  line=$(
    awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
    cut -c1-80 | fzf --nth=1,2
  ) && $EDITOR $(cut -f3 <<< "$line") -c "set nocst" \
                                      -c "silent tag $(cut -f2 <<< "$line")"
}

if [ -f ~/bashrc.local ];
then
    source ~/bashrc.local
fi

if [ -f ~/.dir_colors ];
then
    eval `dircolors ~/.dir_colors`
fi
